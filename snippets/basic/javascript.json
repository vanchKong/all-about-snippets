{
  "import": {
    "prefix": "$(record-small)import",
    "body": "import ${2:moduleName} from '${1:module}'$0",
    "description": "Imports entire module statement in ES6 syntax"
  },
  "require": {
    "prefix": "$(record-small)require",
    "body": "require('${1:package}')",
    "description": "Require a package"
  },
  "module.exports": {
    "prefix": "$(record-small)module.exports",
    "body": "module.exports = {\n\t$0\n}\n",
    "description": "Module exports from Common JS, node syntax at ES6"
  },
  // "exportNamedVariable": {
  //   "prefix": "$(record-small)env",
  //   "body": "export const ${1:exportVariable} = ${2:localVariable}\n",
  //   "description": "Export named variable in ES6 syntax"
  // },
  "constructor": {
    "prefix": "$(record-small)constructor",
    "body": "constructor(${1:params}) {\n\t${0}\n}",
    "description": "Add default constructor in a class in ES6 syntax"
  },
  "method": {
    "prefix": "$(record-small)method",
    "body": "${1:methodName}(${2:params}) {\n\t${0}\n}",
    "description": "Creates a method inside a class in ES6 syntax"
  },
  "forEach": {
    "prefix": "$(record-small).forEach",
    "body": ".forEach((item, index) => {\n\t${0}\n})",
    "description": "Creates a forEach statement in ES6 syntax"
  },
  "map": {
    "prefix": "$(record-small).map",
    "body": ".map((item, index) => {\n\t${0}\n})",
    "description": "Creates a map statement in ES6 syntax"
  },
  "filter": {
    "prefix": "$(record-small).filter",
    "body": ".filter((item, index) => {\n\t${0}\n})",
    "description": "Creates a filter statement in ES6 syntax"
  },
  "every": {
    "prefix": "$(record-small).every",
    "body": ".every((item, index) => {\n\t${0}\n})",
    "description": "Creates a every statement in ES6 syntax"
  },
  "some": {
    "prefix": "$(record-small).some",
    "body": ".some((item, index) => {\n\t${0}\n})",
    "description": "Creates a some statement in ES6 syntax"
  },
  "forOf": {
    "prefix": "$(record-small)forOf",
    "body": "for (const ${1:item} of ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property names of iterable objects"
  },
  "forIn": {
    "prefix": "$(record-small)forIn",
    "body": "for (const ${1:item} in ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property values of iterable objects"
  },
  "setInterval": {
    "prefix": "$(record-small)sti",
    "body": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms})",
    "description": "Executes the given function at specified intervals in ES6 syntax"
  },
  "setTimeOut": {
    "prefix": "$(record-small)sto",
    "body": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms})",
    "description": "Executes the given function after the specified delay in ES6 syntax"
  },
  "promise": {
    "prefix": "$(record-small)prom",
    "body": "return new Promise((resolve, reject) => {\n\t${1}\n})",
    "description": "Creates and returns a new Promise in the standard ES6 syntax"
  },
  "thenCatch": {
    "prefix": "$(record-small)thenc",
    "body": ".then((${1:result}) => {\n\t${2}\n}).catch((${3:err}) => {\n\t${4}\n})",
    "description": "Add the .then and .catch methods to handle promises"
  },
  "consoleLog": {
    "prefix": "$(record-small)clg",
    "body": "console.log(${1:object})",
    "description": "Displays a message in the console"
  },
  "consoleClear": {
    "prefix": "$(record-small)clr",
    "body": "console.clear()",
    "description": "Clears the console"
  }
  // "consoleLogObject": {
  //   "prefix": "$(record-small)clo",
  //   "body": "console.log('${1:object} :>> ', ${1:object})",
  //   "description": "Displays an object in the console with its name"
  // },
  // "consoleAssert": {
  //   "prefix": "$(record-small)cas",
  //   "body": "console.assert(${1:expression}, ${2:object})",
  //   "description": "If the specified expression is false, the message is written to the console along with a stack trace"
  // },
  // "consoleCount": {
  //   "prefix": "$(record-small)cco",
  //   "body": "console.count(${1:label})",
  //   "description": "Writes the the number of times that count() has been invoked at the same line and with the same label"
  // },
  // "consoleDebug": {
  //   "prefix": "$(record-small)cdb",
  //   "body": "console.debug(${1:object})",
  //   "description": "Displays a message in the console. Also display a blue right arrow icon along with the logged message in Safari"
  // },
  // "consoleDir": {
  //   "prefix": "$(record-small)cdi",
  //   "body": "console.dir(${1:object})",
  //   "description": "Prints a JavaScript representation of the specified object"
  // },
  // "consoleError": {
  //   "prefix": "$(record-small)cer",
  //   "body": "console.error(${1:object})",
  //   "description": "Displays a message in the console and also includes a stack trace from where the method was called"
  // },
  // "consoleGroup": {
  //   "prefix": "$(record-small)cgr",
  //   "body": "console.group('${1:label}')",
  //   "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called."
  // },
  // "consoleGroupEnd": {
  //   "prefix": "$(record-small)cge",
  //   "body": "console.groupEnd()",
  //   "description": "Closes out the corresponding console.group()."
  // },
  // "consoleTrace": {
  //   "prefix": "$(record-small)ctr",
  //   "body": "console.trace(${1:object})",
  //   "description": "Prints a stack trace from the point where the method was called"
  // },
  // "consoleWarn": {
  //   "prefix": "$(record-small)cwa",
  //   "body": "console.warn(${1:object})",
  //   "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message"
  // },
  // "consoleInfo": {
  //   "prefix": "$(record-small)cin",
  //   "body": "console.info(${1:object})",
  //   "description": "Displays a message in the console but also displays a blue information icon along with the logged message"
  // },
  // "consoleTable": {
  //   "prefix": "$(record-small)clt",
  //   "body": "console.table(${1:object})",
  //   "description": "Displays tabular data as a table."
  // },
  // "consoleTime": {
  //   "prefix": "$(record-small)cti",
  //   "body": "console.time(${1:object})",
  //   "description": "Sets starting point for execution time measurement"
  // },
  // "consoleTimeEnd": {
  //   "prefix": "$(record-small)cte",
  //   "body": "console.timeEnd(${1:object})",
  //   "description": "Sets end point for execution time measurement"
  // }
}
